# 해쉬 테이블 코드에 Chaining 기법으로 충돌해결 코드를 추가해보기
# 1. 해쉬 함수: key % 8
# 2. 해쉬 키 생성: hash(data)

hash_table = list([0 for i in range(8)])

def get_key(data):
    return hash(data) # key값의 중복은 절대 불가 --> 내장 hash함수

def hash_function(key):
    return key % 8   # hash값이 중복될 수는 없다.

def save_data(data, value):
    # openchaining 구현 시점 --> 링크드 리스트와 비슷한 중복 리스트의 생성을 이용
    index_key = get_key(data) # 절대 중복될 수 없다는 특성
    hash_address = hash_function(index_key)
    if(hash_table[hash_function[get_key(data)]] != 0):
        # 중복된 데이터 즉 이미 이 데이터가 저장되지는 않았는지를 검사 후 추가
        for index in len(hash_table[hash_function[get_key(data)]]):
            if(hash_table[hash_function[get_key(data)]][index][0] == index_key):
                hash_table[hash_function[get_key(data)]][index][1] = value # 변경용 기능 구현
                return 
                # return 으로 인해 변경 기능이 끝나면 save_data 함수가 종료
        hash_table[hash_address].append[index_key,value] # 이미 데이터가 있지만 변경이 아닌 추가일 때
                                
    else:
        hash_table[hash_function[get_key(data)]]=[[index_key,value]]
        
def read_data(data):
    hash_address = hash_function(get_key(data))
    if(hash_table[hash_address] != None):
        for index in len(hash_table[hash_address]):
            if(hash_table[hash_address][index][0] == data):
                return hash_table[hash_address][index][1]
            else:
                return None
    else:
        return None
